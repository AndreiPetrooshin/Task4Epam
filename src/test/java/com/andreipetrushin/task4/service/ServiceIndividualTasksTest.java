package com.andreipetrushin.task4.service;import com.andreipetrushin.task4.entity.Component;import com.andreipetrushin.task4.service.parsers.HandleParser;import org.junit.After;import org.junit.Assert;import org.junit.Before;import org.junit.Test;import java.io.ByteArrayOutputStream;import java.io.PrintStream;import java.util.Arrays;import java.util.List;public class ServiceIndividualTasksTest {    private static final String TEXT = "Test a b test. Ne  test. C A a.";    private static Component component;    private static final ServiceIndividualTasks service=  new ServiceIndividualTasks();    private static final int EXPECTED = 2;    private static final ByteArrayOutputStream output = new ByteArrayOutputStream();    private static final String EXPECTED_STRING_1 = "Ne test. \n"+"C A a. \n" + "Test a b test. \n";    private static final String EXPECTED_STRING_2 = "test. a b Test \n" + "Ne test. \n" + "C A a.";    private static final String EXPECTED_STRING_3 = "a \n" + "b \n" + "c \n" + "ne \n" + "test";    private static final String EXPECTED_STRING_4 = "{test=3, a=3}";    private static final String EXPECTED_STRING_5 = "Test b test. \n" + "Ne test. \n" + "C A";    private static final String EXPECTED_STRING_6 = "{b=0, c=0, ne=0, test=0, a=1}";    private static final List<String> searchWords = Arrays.asList("a","test");    @Before    public void setUpStreams() {        component =  HandleParser.getParserInstance(5,5).handleRequest(TEXT);        System.setOut(new PrintStream(output));    }    @After    public void cleanUpStreams() {        output.reset();        System.setOut(null);    }        @Test        public void shouldReturnCountSentencesWithSameWords(){            int result = service.countSentencesWithSameWords(component);            Assert.assertEquals(EXPECTED,result);        }        @Test        public void shouldPrintSentencesOrderedByCountOfLexemes(){            service.printSentencesOrderByCountOfLexemes(component);            Assert.assertEquals(EXPECTED_STRING_1,output.toString());        }        @Test        public void shouldChangeFirstWordWithLastInSentences(){            service.changeFirstWordWithLast(component);            Assert.assertEquals(EXPECTED_STRING_2,output.toString().trim());        }        @Test        public void shouldPrintLexemesOrderedByAlphabet(){            service.printLexemesOrderedByAlphabet(component);            Assert.assertEquals(EXPECTED_STRING_3, output.toString().trim());        }        @Test        public void shouldPrintWordsByNumberOfEntries(){            service.printWordsByNumberOfEntry(component,searchWords);            Assert.assertEquals(EXPECTED_STRING_4, output.toString().trim());        }        @Test        public void shouldDeleteLexemesByFirstCharAndSize(){            service.deleteLexemesByCharAndSize(component,'a', 1);            Assert.assertEquals(EXPECTED_STRING_5, output.toString().trim());        }        @Test        public void shouldSortLexemesByEntryOfSymbols(){            service.sortLexemesByEntryOfSymbol(component,'a');            Assert.assertEquals(EXPECTED_STRING_6, output.toString().trim());        }}